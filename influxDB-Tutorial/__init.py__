import influxdb_client, os, time
from datetime import datetime
from dotenv import load_dotenv, main
import os
from influxdb_client import InfluxDBClient, Point, WritePrecision
from influxdb_client.client.write_api import SYNCHRONOUS

load_dotenv()
#token = os.environ.get("INFLUXDB_TOKEN")
#org = "Columbia"
#bucket="midterm_experiment"
# You can generate a Token from the "Tokens Tab" in the UI
token = os.getenv('TOKEN')
org = os.getenv('ORG')
bucket = os.getenv('BUCKET')
url = "http://localhost:8086"

write_client = influxdb_client.InfluxDBClient(url=url, token=token, org=org)

write_api = write_client.write_api(write_options=SYNCHRONOUS)
   
for value in range(5):
  point = (
    Point("measurement1")
    .tag("tagname1", "tagvalue1")
    .field("field1", value)
  )
  write_api.write(bucket=bucket, org="Columbia", record=point)
  time.sleep(1) # separate points by 1 second

query_api = write_client.query_api()

query = """from(bucket: "midterm_experiment")
 |> range(start: -10m)
 |> filter(fn: (r) => r._measurement == "measurement1")"""
# Measure start time
start_time = time.time()
tables = query_api.query(query, org="Columbia")
# Measure end time
end_time = time.time()

# Calculate execution time
execution_time = end_time - start_time

# Print the results
print("Query:", query)
print("Execution time for query:", execution_time, "seconds")


for table in tables:
  for record in table.records:
    print(record)

query_api = write_client.query_api()

query = """from(bucket: "midterm_experiment")
  |> range(start: -10m)
  |> filter(fn: (r) => r._measurement == "measurement1")
  |> mean()"""
# Measure start time
start_time = time.time()
tables = query_api.query(query, org="Columbia")
# Measure end time
end_time = time.time()

# Calculate execution time
execution_time = end_time - start_time

# Print the results
print("Query:", query)
print("Execution time for aggregate query:", execution_time, "seconds")

# Process the results
for table in tables:
    for record in table.records:
        print(record)

# Close the client
write_client.close()
